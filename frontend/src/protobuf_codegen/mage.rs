// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 31.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `mage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:spellfire.Spell)
pub enum Spell {
    // @@protoc_insertion_point(enum_value:spellfire.Spell.SPELL_FIREBALL)
    SPELL_FIREBALL = 0,
    // @@protoc_insertion_point(enum_value:spellfire.Spell.SPELL_TORNADO)
    SPELL_TORNADO = 2,
    // @@protoc_insertion_point(enum_value:spellfire.Spell.SPELL_ICE_SHARD)
    SPELL_ICE_SHARD = 1,
}

impl ::protobuf::Enum for Spell {
    const NAME: &'static str = "Spell";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Spell> {
        match value {
            0 => ::std::option::Option::Some(Spell::SPELL_FIREBALL),
            2 => ::std::option::Option::Some(Spell::SPELL_TORNADO),
            1 => ::std::option::Option::Some(Spell::SPELL_ICE_SHARD),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Spell> {
        match str {
            "SPELL_FIREBALL" => ::std::option::Option::Some(Spell::SPELL_FIREBALL),
            "SPELL_TORNADO" => ::std::option::Option::Some(Spell::SPELL_TORNADO),
            "SPELL_ICE_SHARD" => ::std::option::Option::Some(Spell::SPELL_ICE_SHARD),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Spell] = &[
        Spell::SPELL_FIREBALL,
        Spell::SPELL_TORNADO,
        Spell::SPELL_ICE_SHARD,
    ];
}

impl ::protobuf::EnumFull for Spell {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Spell").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            Spell::SPELL_FIREBALL => 0,
            Spell::SPELL_TORNADO => 1,
            Spell::SPELL_ICE_SHARD => 2,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Spell {
    fn default() -> Self {
        Spell::SPELL_FIREBALL
    }
}

impl Spell {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Spell>("Spell")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nmage.proto\x12\tspellfire\x1a\x0btypes.proto*C\n\x05Spell\x12\x12\n\
    \x0eSPELL_FIREBALL\x10\0\x12\x11\n\rSPELL_TORNADO\x10\x02\x12\x13\n\x0fS\
    PELL_ICE_SHARD\x10\x01B?Z=github.com/Icemaster-Eric/Spellfire/backend/in\
    ternal/proto;pbb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::types::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Spell::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
