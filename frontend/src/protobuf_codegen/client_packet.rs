// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 31.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `client_packet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:spellfire.ClientEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientEvent {
    // message fields
    // @@protoc_insertion_point(field:spellfire.ClientEvent.type)
    pub type_: ::protobuf::EnumOrUnknown<client_event::ClientEventType>,
    // @@protoc_insertion_point(field:spellfire.ClientEvent.timestamp)
    pub timestamp: ::protobuf::MessageField<super::types::Timestamp>,
    // @@protoc_insertion_point(field:spellfire.ClientEvent.movement)
    pub movement: ::protobuf::MessageField<super::types::Vec2>,
    // @@protoc_insertion_point(field:spellfire.ClientEvent.spell)
    pub spell: ::protobuf::EnumOrUnknown<super::mage::Spell>,
    // special fields
    // @@protoc_insertion_point(special_field:spellfire.ClientEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientEvent {
    fn default() -> &'a ClientEvent {
        <ClientEvent as ::protobuf::Message>::default_instance()
    }
}

impl ClientEvent {
    pub fn new() -> ClientEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ClientEvent| { &m.type_ },
            |m: &mut ClientEvent| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Timestamp>(
            "timestamp",
            |m: &ClientEvent| { &m.timestamp },
            |m: &mut ClientEvent| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Vec2>(
            "movement",
            |m: &ClientEvent| { &m.movement },
            |m: &mut ClientEvent| { &mut m.movement },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spell",
            |m: &ClientEvent| { &m.spell },
            |m: &mut ClientEvent| { &mut m.spell },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientEvent>(
            "ClientEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientEvent {
    const NAME: &'static str = "ClientEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.movement)?;
                },
                48 => {
                    self.spell = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(client_event::ClientEventType::CLIENT_EVENT_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.movement.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.spell != ::protobuf::EnumOrUnknown::new(super::mage::Spell::SPELL_FIREBALL) {
            my_size += ::protobuf::rt::int32_size(6, self.spell.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(client_event::ClientEventType::CLIENT_EVENT_TYPE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.movement.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.spell != ::protobuf::EnumOrUnknown::new(super::mage::Spell::SPELL_FIREBALL) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.spell))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientEvent {
        ClientEvent::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(client_event::ClientEventType::CLIENT_EVENT_TYPE_UNSPECIFIED);
        self.timestamp.clear();
        self.movement.clear();
        self.spell = ::protobuf::EnumOrUnknown::new(super::mage::Spell::SPELL_FIREBALL);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientEvent {
        static instance: ClientEvent = ClientEvent {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            timestamp: ::protobuf::MessageField::none(),
            movement: ::protobuf::MessageField::none(),
            spell: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ClientEvent`
pub mod client_event {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:spellfire.ClientEvent.ClientEventType)
    pub enum ClientEventType {
        // @@protoc_insertion_point(enum_value:spellfire.ClientEvent.ClientEventType.CLIENT_EVENT_TYPE_UNSPECIFIED)
        CLIENT_EVENT_TYPE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:spellfire.ClientEvent.ClientEventType.MOVE)
        MOVE = 1,
        // @@protoc_insertion_point(enum_value:spellfire.ClientEvent.ClientEventType.START_FIRE)
        START_FIRE = 2,
        // @@protoc_insertion_point(enum_value:spellfire.ClientEvent.ClientEventType.STOP_FIRE)
        STOP_FIRE = 3,
        // @@protoc_insertion_point(enum_value:spellfire.ClientEvent.ClientEventType.CAST_SPELL)
        CAST_SPELL = 4,
    }

    impl ::protobuf::Enum for ClientEventType {
        const NAME: &'static str = "ClientEventType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ClientEventType> {
            match value {
                0 => ::std::option::Option::Some(ClientEventType::CLIENT_EVENT_TYPE_UNSPECIFIED),
                1 => ::std::option::Option::Some(ClientEventType::MOVE),
                2 => ::std::option::Option::Some(ClientEventType::START_FIRE),
                3 => ::std::option::Option::Some(ClientEventType::STOP_FIRE),
                4 => ::std::option::Option::Some(ClientEventType::CAST_SPELL),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ClientEventType> {
            match str {
                "CLIENT_EVENT_TYPE_UNSPECIFIED" => ::std::option::Option::Some(ClientEventType::CLIENT_EVENT_TYPE_UNSPECIFIED),
                "MOVE" => ::std::option::Option::Some(ClientEventType::MOVE),
                "START_FIRE" => ::std::option::Option::Some(ClientEventType::START_FIRE),
                "STOP_FIRE" => ::std::option::Option::Some(ClientEventType::STOP_FIRE),
                "CAST_SPELL" => ::std::option::Option::Some(ClientEventType::CAST_SPELL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ClientEventType] = &[
            ClientEventType::CLIENT_EVENT_TYPE_UNSPECIFIED,
            ClientEventType::MOVE,
            ClientEventType::START_FIRE,
            ClientEventType::STOP_FIRE,
            ClientEventType::CAST_SPELL,
        ];
    }

    impl ::protobuf::EnumFull for ClientEventType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ClientEvent.ClientEventType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ClientEventType {
        fn default() -> Self {
            ClientEventType::CLIENT_EVENT_TYPE_UNSPECIFIED
        }
    }

    impl ClientEventType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ClientEventType>("ClientEvent.ClientEventType")
        }
    }
}

// @@protoc_insertion_point(message:spellfire.ClientPacket)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientPacket {
    // message fields
    // @@protoc_insertion_point(field:spellfire.ClientPacket.cursor)
    pub cursor: ::protobuf::MessageField<super::types::Vec2>,
    // @@protoc_insertion_point(field:spellfire.ClientPacket.events)
    pub events: ::std::vec::Vec<ClientEvent>,
    // special fields
    // @@protoc_insertion_point(special_field:spellfire.ClientPacket.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientPacket {
    fn default() -> &'a ClientPacket {
        <ClientPacket as ::protobuf::Message>::default_instance()
    }
}

impl ClientPacket {
    pub fn new() -> ClientPacket {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Vec2>(
            "cursor",
            |m: &ClientPacket| { &m.cursor },
            |m: &mut ClientPacket| { &mut m.cursor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "events",
            |m: &ClientPacket| { &m.events },
            |m: &mut ClientPacket| { &mut m.events },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientPacket>(
            "ClientPacket",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientPacket {
    const NAME: &'static str = "ClientPacket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cursor)?;
                },
                26 => {
                    self.events.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cursor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cursor.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.events {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientPacket {
        ClientPacket::new()
    }

    fn clear(&mut self) {
        self.cursor.clear();
        self.events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientPacket {
        static instance: ClientPacket = ClientPacket {
            cursor: ::protobuf::MessageField::none(),
            events: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientPacket {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientPacket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientPacket {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13client_packet.proto\x12\tspellfire\x1a\x0btypes.proto\x1a\nmage.pr\
    oto\"\xc1\x02\n\x0bClientEvent\x12:\n\x04type\x18\x01\x20\x01(\x0e2&.spe\
    llfire.ClientEvent.ClientEventTypeR\x04type\x122\n\ttimestamp\x18\x02\
    \x20\x01(\x0b2\x14.spellfire.TimestampR\ttimestamp\x12+\n\x08movement\
    \x18\x04\x20\x01(\x0b2\x0f.spellfire.Vec2R\x08movement\x12&\n\x05spell\
    \x18\x06\x20\x01(\x0e2\x10.spellfire.SpellR\x05spell\"m\n\x0fClientEvent\
    Type\x12!\n\x1dCLIENT_EVENT_TYPE_UNSPECIFIED\x10\0\x12\x08\n\x04MOVE\x10\
    \x01\x12\x0e\n\nSTART_FIRE\x10\x02\x12\r\n\tSTOP_FIRE\x10\x03\x12\x0e\n\
    \nCAST_SPELL\x10\x04\"g\n\x0cClientPacket\x12'\n\x06cursor\x18\x02\x20\
    \x01(\x0b2\x0f.spellfire.Vec2R\x06cursor\x12.\n\x06events\x18\x03\x20\
    \x03(\x0b2\x16.spellfire.ClientEventR\x06eventsB?Z=github.com/Icemaster-\
    Eric/Spellfire/backend/internal/proto;pbb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::types::file_descriptor().clone());
            deps.push(super::mage::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ClientEvent::generated_message_descriptor_data());
            messages.push(ClientPacket::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(client_event::ClientEventType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
