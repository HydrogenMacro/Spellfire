// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 31.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `server_packet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:spellfire.Collider)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Collider {
    // message fields
    // @@protoc_insertion_point(field:spellfire.Collider.type)
    pub type_: ::protobuf::EnumOrUnknown<collider::ColliderType>,
    // @@protoc_insertion_point(field:spellfire.Collider.rotation)
    pub rotation: f64,
    // @@protoc_insertion_point(field:spellfire.Collider.size)
    pub size: ::protobuf::MessageField<super::types::Vec2>,
    // @@protoc_insertion_point(field:spellfire.Collider.radius)
    pub radius: f64,
    // @@protoc_insertion_point(field:spellfire.Collider.position)
    pub position: ::protobuf::MessageField<super::types::Vec2>,
    // @@protoc_insertion_point(field:spellfire.Collider.velocity)
    pub velocity: ::protobuf::MessageField<super::types::Vec2>,
    // @@protoc_insertion_point(field:spellfire.Collider.is_static)
    pub is_static: bool,
    // special fields
    // @@protoc_insertion_point(special_field:spellfire.Collider.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Collider {
    fn default() -> &'a Collider {
        <Collider as ::protobuf::Message>::default_instance()
    }
}

impl Collider {
    pub fn new() -> Collider {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Collider| { &m.type_ },
            |m: &mut Collider| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rotation",
            |m: &Collider| { &m.rotation },
            |m: &mut Collider| { &mut m.rotation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Vec2>(
            "size",
            |m: &Collider| { &m.size },
            |m: &mut Collider| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "radius",
            |m: &Collider| { &m.radius },
            |m: &mut Collider| { &mut m.radius },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Vec2>(
            "position",
            |m: &Collider| { &m.position },
            |m: &mut Collider| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Vec2>(
            "velocity",
            |m: &Collider| { &m.velocity },
            |m: &mut Collider| { &mut m.velocity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_static",
            |m: &Collider| { &m.is_static },
            |m: &mut Collider| { &mut m.is_static },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Collider>(
            "Collider",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Collider {
    const NAME: &'static str = "Collider";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.rotation = is.read_double()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.size)?;
                },
                33 => {
                    self.radius = is.read_double()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.velocity)?;
                },
                56 => {
                    self.is_static = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(collider::ColliderType::COLLIDER_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.rotation != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.radius != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.velocity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_static != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(collider::ColliderType::COLLIDER_TYPE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.rotation != 0. {
            os.write_double(2, self.rotation)?;
        }
        if let Some(v) = self.size.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.radius != 0. {
            os.write_double(4, self.radius)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.velocity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.is_static != false {
            os.write_bool(7, self.is_static)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Collider {
        Collider::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(collider::ColliderType::COLLIDER_TYPE_UNSPECIFIED);
        self.rotation = 0.;
        self.size.clear();
        self.radius = 0.;
        self.position.clear();
        self.velocity.clear();
        self.is_static = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Collider {
        static instance: Collider = Collider {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            rotation: 0.,
            size: ::protobuf::MessageField::none(),
            radius: 0.,
            position: ::protobuf::MessageField::none(),
            velocity: ::protobuf::MessageField::none(),
            is_static: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Collider {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Collider").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Collider {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Collider {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Collider`
pub mod collider {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:spellfire.Collider.ColliderType)
    pub enum ColliderType {
        // @@protoc_insertion_point(enum_value:spellfire.Collider.ColliderType.COLLIDER_TYPE_UNSPECIFIED)
        COLLIDER_TYPE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:spellfire.Collider.ColliderType.POINT)
        POINT = 1,
        // @@protoc_insertion_point(enum_value:spellfire.Collider.ColliderType.CIRCLE)
        CIRCLE = 2,
        // @@protoc_insertion_point(enum_value:spellfire.Collider.ColliderType.RECT)
        RECT = 3,
    }

    impl ::protobuf::Enum for ColliderType {
        const NAME: &'static str = "ColliderType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ColliderType> {
            match value {
                0 => ::std::option::Option::Some(ColliderType::COLLIDER_TYPE_UNSPECIFIED),
                1 => ::std::option::Option::Some(ColliderType::POINT),
                2 => ::std::option::Option::Some(ColliderType::CIRCLE),
                3 => ::std::option::Option::Some(ColliderType::RECT),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ColliderType> {
            match str {
                "COLLIDER_TYPE_UNSPECIFIED" => ::std::option::Option::Some(ColliderType::COLLIDER_TYPE_UNSPECIFIED),
                "POINT" => ::std::option::Option::Some(ColliderType::POINT),
                "CIRCLE" => ::std::option::Option::Some(ColliderType::CIRCLE),
                "RECT" => ::std::option::Option::Some(ColliderType::RECT),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ColliderType] = &[
            ColliderType::COLLIDER_TYPE_UNSPECIFIED,
            ColliderType::POINT,
            ColliderType::CIRCLE,
            ColliderType::RECT,
        ];
    }

    impl ::protobuf::EnumFull for ColliderType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Collider.ColliderType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ColliderType {
        fn default() -> Self {
            ColliderType::COLLIDER_TYPE_UNSPECIFIED
        }
    }

    impl ColliderType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ColliderType>("Collider.ColliderType")
        }
    }
}

// @@protoc_insertion_point(message:spellfire.EntityAttribute)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityAttribute {
    // message fields
    // @@protoc_insertion_point(field:spellfire.EntityAttribute.type)
    pub type_: ::protobuf::EnumOrUnknown<entity_attribute::EntityAttributeType>,
    // @@protoc_insertion_point(field:spellfire.EntityAttribute.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:spellfire.EntityAttribute.health)
    pub health: f64,
    // @@protoc_insertion_point(field:spellfire.EntityAttribute.gun)
    pub gun: ::protobuf::EnumOrUnknown<Gun>,
    // @@protoc_insertion_point(field:spellfire.EntityAttribute.damage)
    pub damage: f64,
    // @@protoc_insertion_point(field:spellfire.EntityAttribute.spells_fired)
    pub spells_fired: ::std::vec::Vec<::protobuf::EnumOrUnknown<super::mage::Spell>>,
    // @@protoc_insertion_point(field:spellfire.EntityAttribute.spell_fire_time)
    pub spell_fire_time: ::protobuf::MessageField<super::types::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:spellfire.EntityAttribute.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityAttribute {
    fn default() -> &'a EntityAttribute {
        <EntityAttribute as ::protobuf::Message>::default_instance()
    }
}

impl EntityAttribute {
    pub fn new() -> EntityAttribute {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &EntityAttribute| { &m.type_ },
            |m: &mut EntityAttribute| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &EntityAttribute| { &m.name },
            |m: &mut EntityAttribute| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "health",
            |m: &EntityAttribute| { &m.health },
            |m: &mut EntityAttribute| { &mut m.health },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gun",
            |m: &EntityAttribute| { &m.gun },
            |m: &mut EntityAttribute| { &mut m.gun },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "damage",
            |m: &EntityAttribute| { &m.damage },
            |m: &mut EntityAttribute| { &mut m.damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "spells_fired",
            |m: &EntityAttribute| { &m.spells_fired },
            |m: &mut EntityAttribute| { &mut m.spells_fired },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Timestamp>(
            "spell_fire_time",
            |m: &EntityAttribute| { &m.spell_fire_time },
            |m: &mut EntityAttribute| { &mut m.spell_fire_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityAttribute>(
            "EntityAttribute",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityAttribute {
    const NAME: &'static str = "EntityAttribute";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                25 => {
                    self.health = is.read_double()?;
                },
                32 => {
                    self.gun = is.read_enum_or_unknown()?;
                },
                41 => {
                    self.damage = is.read_double()?;
                },
                48 => {
                    self.spells_fired.push(is.read_enum_or_unknown()?);
                },
                50 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.spells_fired)?
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spell_fire_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(entity_attribute::EntityAttributeType::ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.health != 0. {
            my_size += 1 + 8;
        }
        if self.gun != ::protobuf::EnumOrUnknown::new(Gun::GUN_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.gun.value());
        }
        if self.damage != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::vec_packed_enum_or_unknown_size(6, &self.spells_fired);
        if let Some(v) = self.spell_fire_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(entity_attribute::EntityAttributeType::ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.health != 0. {
            os.write_double(3, self.health)?;
        }
        if self.gun != ::protobuf::EnumOrUnknown::new(Gun::GUN_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.gun))?;
        }
        if self.damage != 0. {
            os.write_double(5, self.damage)?;
        }
        os.write_repeated_packed_enum_or_unknown(6, &self.spells_fired)?;
        if let Some(v) = self.spell_fire_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityAttribute {
        EntityAttribute::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(entity_attribute::EntityAttributeType::ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED);
        self.name.clear();
        self.health = 0.;
        self.gun = ::protobuf::EnumOrUnknown::new(Gun::GUN_UNSPECIFIED);
        self.damage = 0.;
        self.spells_fired.clear();
        self.spell_fire_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityAttribute {
        static instance: EntityAttribute = EntityAttribute {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            name: ::std::string::String::new(),
            health: 0.,
            gun: ::protobuf::EnumOrUnknown::from_i32(0),
            damage: 0.,
            spells_fired: ::std::vec::Vec::new(),
            spell_fire_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityAttribute {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityAttribute").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityAttribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityAttribute {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EntityAttribute`
pub mod entity_attribute {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:spellfire.EntityAttribute.EntityAttributeType)
    pub enum EntityAttributeType {
        // @@protoc_insertion_point(enum_value:spellfire.EntityAttribute.EntityAttributeType.ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED)
        ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:spellfire.EntityAttribute.EntityAttributeType.NAME)
        NAME = 1,
        // @@protoc_insertion_point(enum_value:spellfire.EntityAttribute.EntityAttributeType.HEALTH)
        HEALTH = 2,
        // @@protoc_insertion_point(enum_value:spellfire.EntityAttribute.EntityAttributeType.GUN)
        GUN = 3,
        // @@protoc_insertion_point(enum_value:spellfire.EntityAttribute.EntityAttributeType.DAMAGE)
        DAMAGE = 4,
        // @@protoc_insertion_point(enum_value:spellfire.EntityAttribute.EntityAttributeType.SPELL_1_LAST_FIRE)
        SPELL_1_LAST_FIRE = 5,
        // @@protoc_insertion_point(enum_value:spellfire.EntityAttribute.EntityAttributeType.SPELL_2_LAST_FIRE)
        SPELL_2_LAST_FIRE = 6,
        // @@protoc_insertion_point(enum_value:spellfire.EntityAttribute.EntityAttributeType.SPELL_3_LAST_FIRE)
        SPELL_3_LAST_FIRE = 7,
    }

    impl ::protobuf::Enum for EntityAttributeType {
        const NAME: &'static str = "EntityAttributeType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EntityAttributeType> {
            match value {
                0 => ::std::option::Option::Some(EntityAttributeType::ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED),
                1 => ::std::option::Option::Some(EntityAttributeType::NAME),
                2 => ::std::option::Option::Some(EntityAttributeType::HEALTH),
                3 => ::std::option::Option::Some(EntityAttributeType::GUN),
                4 => ::std::option::Option::Some(EntityAttributeType::DAMAGE),
                5 => ::std::option::Option::Some(EntityAttributeType::SPELL_1_LAST_FIRE),
                6 => ::std::option::Option::Some(EntityAttributeType::SPELL_2_LAST_FIRE),
                7 => ::std::option::Option::Some(EntityAttributeType::SPELL_3_LAST_FIRE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EntityAttributeType> {
            match str {
                "ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED" => ::std::option::Option::Some(EntityAttributeType::ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED),
                "NAME" => ::std::option::Option::Some(EntityAttributeType::NAME),
                "HEALTH" => ::std::option::Option::Some(EntityAttributeType::HEALTH),
                "GUN" => ::std::option::Option::Some(EntityAttributeType::GUN),
                "DAMAGE" => ::std::option::Option::Some(EntityAttributeType::DAMAGE),
                "SPELL_1_LAST_FIRE" => ::std::option::Option::Some(EntityAttributeType::SPELL_1_LAST_FIRE),
                "SPELL_2_LAST_FIRE" => ::std::option::Option::Some(EntityAttributeType::SPELL_2_LAST_FIRE),
                "SPELL_3_LAST_FIRE" => ::std::option::Option::Some(EntityAttributeType::SPELL_3_LAST_FIRE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EntityAttributeType] = &[
            EntityAttributeType::ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED,
            EntityAttributeType::NAME,
            EntityAttributeType::HEALTH,
            EntityAttributeType::GUN,
            EntityAttributeType::DAMAGE,
            EntityAttributeType::SPELL_1_LAST_FIRE,
            EntityAttributeType::SPELL_2_LAST_FIRE,
            EntityAttributeType::SPELL_3_LAST_FIRE,
        ];
    }

    impl ::protobuf::EnumFull for EntityAttributeType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("EntityAttribute.EntityAttributeType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EntityAttributeType {
        fn default() -> Self {
            EntityAttributeType::ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED
        }
    }

    impl EntityAttributeType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EntityAttributeType>("EntityAttribute.EntityAttributeType")
        }
    }
}

// @@protoc_insertion_point(message:spellfire.Entity)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Entity {
    // message fields
    // @@protoc_insertion_point(field:spellfire.Entity.id)
    pub id: u32,
    // @@protoc_insertion_point(field:spellfire.Entity.type)
    pub type_: ::protobuf::EnumOrUnknown<entity::EntityType>,
    // @@protoc_insertion_point(field:spellfire.Entity.collider)
    pub collider: ::protobuf::MessageField<Collider>,
    // @@protoc_insertion_point(field:spellfire.Entity.states)
    pub states: ::std::vec::Vec<::protobuf::EnumOrUnknown<entity::EntityState>>,
    // @@protoc_insertion_point(field:spellfire.Entity.attributes)
    pub attributes: ::std::vec::Vec<EntityAttribute>,
    // special fields
    // @@protoc_insertion_point(special_field:spellfire.Entity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Entity {
    fn default() -> &'a Entity {
        <Entity as ::protobuf::Message>::default_instance()
    }
}

impl Entity {
    pub fn new() -> Entity {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Entity| { &m.id },
            |m: &mut Entity| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Entity| { &m.type_ },
            |m: &mut Entity| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Collider>(
            "collider",
            |m: &Entity| { &m.collider },
            |m: &mut Entity| { &mut m.collider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "states",
            |m: &Entity| { &m.states },
            |m: &mut Entity| { &mut m.states },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &Entity| { &m.attributes },
            |m: &mut Entity| { &mut m.attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entity>(
            "Entity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Entity {
    const NAME: &'static str = "Entity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.collider)?;
                },
                40 => {
                    self.states.push(is.read_enum_or_unknown()?);
                },
                42 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.states)?
                },
                50 => {
                    self.attributes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(entity::EntityType::ENTITY_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        if let Some(v) = self.collider.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_enum_or_unknown_size(5, &self.states);
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(entity::EntityType::ENTITY_TYPE_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.collider.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_repeated_packed_enum_or_unknown(5, &self.states)?;
        for v in &self.attributes {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Entity {
        Entity::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.type_ = ::protobuf::EnumOrUnknown::new(entity::EntityType::ENTITY_TYPE_UNSPECIFIED);
        self.collider.clear();
        self.states.clear();
        self.attributes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Entity {
        static instance: Entity = Entity {
            id: 0,
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            collider: ::protobuf::MessageField::none(),
            states: ::std::vec::Vec::new(),
            attributes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Entity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Entity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Entity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Entity`
pub mod entity {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:spellfire.Entity.EntityType)
    pub enum EntityType {
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.ENTITY_TYPE_UNSPECIFIED)
        ENTITY_TYPE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.GUNNER)
        GUNNER = 1,
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.MAGE)
        MAGE = 2,
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.BULLET)
        BULLET = 3,
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.BUSH)
        BUSH = 4,
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.TREE)
        TREE = 5,
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.ROCK)
        ROCK = 6,
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.DEAD_BUSH)
        DEAD_BUSH = 7,
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityType.CACTUS)
        CACTUS = 8,
    }

    impl ::protobuf::Enum for EntityType {
        const NAME: &'static str = "EntityType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EntityType> {
            match value {
                0 => ::std::option::Option::Some(EntityType::ENTITY_TYPE_UNSPECIFIED),
                1 => ::std::option::Option::Some(EntityType::GUNNER),
                2 => ::std::option::Option::Some(EntityType::MAGE),
                3 => ::std::option::Option::Some(EntityType::BULLET),
                4 => ::std::option::Option::Some(EntityType::BUSH),
                5 => ::std::option::Option::Some(EntityType::TREE),
                6 => ::std::option::Option::Some(EntityType::ROCK),
                7 => ::std::option::Option::Some(EntityType::DEAD_BUSH),
                8 => ::std::option::Option::Some(EntityType::CACTUS),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EntityType> {
            match str {
                "ENTITY_TYPE_UNSPECIFIED" => ::std::option::Option::Some(EntityType::ENTITY_TYPE_UNSPECIFIED),
                "GUNNER" => ::std::option::Option::Some(EntityType::GUNNER),
                "MAGE" => ::std::option::Option::Some(EntityType::MAGE),
                "BULLET" => ::std::option::Option::Some(EntityType::BULLET),
                "BUSH" => ::std::option::Option::Some(EntityType::BUSH),
                "TREE" => ::std::option::Option::Some(EntityType::TREE),
                "ROCK" => ::std::option::Option::Some(EntityType::ROCK),
                "DEAD_BUSH" => ::std::option::Option::Some(EntityType::DEAD_BUSH),
                "CACTUS" => ::std::option::Option::Some(EntityType::CACTUS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EntityType] = &[
            EntityType::ENTITY_TYPE_UNSPECIFIED,
            EntityType::GUNNER,
            EntityType::MAGE,
            EntityType::BULLET,
            EntityType::BUSH,
            EntityType::TREE,
            EntityType::ROCK,
            EntityType::DEAD_BUSH,
            EntityType::CACTUS,
        ];
    }

    impl ::protobuf::EnumFull for EntityType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Entity.EntityType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EntityType {
        fn default() -> Self {
            EntityType::ENTITY_TYPE_UNSPECIFIED
        }
    }

    impl EntityType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EntityType>("Entity.EntityType")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:spellfire.Entity.EntityState)
    pub enum EntityState {
        // @@protoc_insertion_point(enum_value:spellfire.Entity.EntityState.ENTITY_STATE_UNSPECIFIED)
        ENTITY_STATE_UNSPECIFIED = 0,
    }

    impl ::protobuf::Enum for EntityState {
        const NAME: &'static str = "EntityState";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EntityState> {
            match value {
                0 => ::std::option::Option::Some(EntityState::ENTITY_STATE_UNSPECIFIED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EntityState> {
            match str {
                "ENTITY_STATE_UNSPECIFIED" => ::std::option::Option::Some(EntityState::ENTITY_STATE_UNSPECIFIED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EntityState] = &[
            EntityState::ENTITY_STATE_UNSPECIFIED,
        ];
    }

    impl ::protobuf::EnumFull for EntityState {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Entity.EntityState").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EntityState {
        fn default() -> Self {
            EntityState::ENTITY_STATE_UNSPECIFIED
        }
    }

    impl EntityState {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EntityState>("Entity.EntityState")
        }
    }
}

// @@protoc_insertion_point(message:spellfire.ServerEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerEvent {
    // message fields
    // @@protoc_insertion_point(field:spellfire.ServerEvent.type)
    pub type_: ::protobuf::EnumOrUnknown<server_event::ServerEventType>,
    // @@protoc_insertion_point(field:spellfire.ServerEvent.enter_game_player_id)
    pub enter_game_player_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:spellfire.ServerEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerEvent {
    fn default() -> &'a ServerEvent {
        <ServerEvent as ::protobuf::Message>::default_instance()
    }
}

impl ServerEvent {
    pub fn new() -> ServerEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ServerEvent| { &m.type_ },
            |m: &mut ServerEvent| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enter_game_player_id",
            |m: &ServerEvent| { &m.enter_game_player_id },
            |m: &mut ServerEvent| { &mut m.enter_game_player_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerEvent>(
            "ServerEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerEvent {
    const NAME: &'static str = "ServerEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.enter_game_player_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(server_event::ServerEventType::SERVER_EVENT_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.enter_game_player_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.enter_game_player_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(server_event::ServerEventType::SERVER_EVENT_TYPE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.enter_game_player_id != 0 {
            os.write_uint32(2, self.enter_game_player_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerEvent {
        ServerEvent::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(server_event::ServerEventType::SERVER_EVENT_TYPE_UNSPECIFIED);
        self.enter_game_player_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerEvent {
        static instance: ServerEvent = ServerEvent {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            enter_game_player_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ServerEvent`
pub mod server_event {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:spellfire.ServerEvent.ServerEventType)
    pub enum ServerEventType {
        // @@protoc_insertion_point(enum_value:spellfire.ServerEvent.ServerEventType.SERVER_EVENT_TYPE_UNSPECIFIED)
        SERVER_EVENT_TYPE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:spellfire.ServerEvent.ServerEventType.ENTER_GAME)
        ENTER_GAME = 1,
    }

    impl ::protobuf::Enum for ServerEventType {
        const NAME: &'static str = "ServerEventType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ServerEventType> {
            match value {
                0 => ::std::option::Option::Some(ServerEventType::SERVER_EVENT_TYPE_UNSPECIFIED),
                1 => ::std::option::Option::Some(ServerEventType::ENTER_GAME),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ServerEventType> {
            match str {
                "SERVER_EVENT_TYPE_UNSPECIFIED" => ::std::option::Option::Some(ServerEventType::SERVER_EVENT_TYPE_UNSPECIFIED),
                "ENTER_GAME" => ::std::option::Option::Some(ServerEventType::ENTER_GAME),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ServerEventType] = &[
            ServerEventType::SERVER_EVENT_TYPE_UNSPECIFIED,
            ServerEventType::ENTER_GAME,
        ];
    }

    impl ::protobuf::EnumFull for ServerEventType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ServerEvent.ServerEventType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ServerEventType {
        fn default() -> Self {
            ServerEventType::SERVER_EVENT_TYPE_UNSPECIFIED
        }
    }

    impl ServerEventType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ServerEventType>("ServerEvent.ServerEventType")
        }
    }
}

// @@protoc_insertion_point(message:spellfire.ServerPacket)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerPacket {
    // message fields
    // @@protoc_insertion_point(field:spellfire.ServerPacket.timestamp)
    pub timestamp: ::protobuf::MessageField<super::types::Timestamp>,
    // @@protoc_insertion_point(field:spellfire.ServerPacket.entities)
    pub entities: ::std::vec::Vec<Entity>,
    // @@protoc_insertion_point(field:spellfire.ServerPacket.events)
    pub events: ::std::vec::Vec<ServerEvent>,
    // special fields
    // @@protoc_insertion_point(special_field:spellfire.ServerPacket.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerPacket {
    fn default() -> &'a ServerPacket {
        <ServerPacket as ::protobuf::Message>::default_instance()
    }
}

impl ServerPacket {
    pub fn new() -> ServerPacket {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Timestamp>(
            "timestamp",
            |m: &ServerPacket| { &m.timestamp },
            |m: &mut ServerPacket| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entities",
            |m: &ServerPacket| { &m.entities },
            |m: &mut ServerPacket| { &mut m.entities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "events",
            |m: &ServerPacket| { &m.events },
            |m: &mut ServerPacket| { &mut m.events },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerPacket>(
            "ServerPacket",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerPacket {
    const NAME: &'static str = "ServerPacket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                18 => {
                    self.entities.push(is.read_message()?);
                },
                26 => {
                    self.events.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.entities {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.events {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerPacket {
        ServerPacket::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.entities.clear();
        self.events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerPacket {
        static instance: ServerPacket = ServerPacket {
            timestamp: ::protobuf::MessageField::none(),
            entities: ::std::vec::Vec::new(),
            events: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerPacket {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerPacket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerPacket {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:spellfire.Gun)
pub enum Gun {
    // @@protoc_insertion_point(enum_value:spellfire.Gun.GUN_UNSPECIFIED)
    GUN_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:spellfire.Gun.GUN_AUTOMATIC_RIFLE)
    GUN_AUTOMATIC_RIFLE = 1,
}

impl ::protobuf::Enum for Gun {
    const NAME: &'static str = "Gun";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Gun> {
        match value {
            0 => ::std::option::Option::Some(Gun::GUN_UNSPECIFIED),
            1 => ::std::option::Option::Some(Gun::GUN_AUTOMATIC_RIFLE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Gun> {
        match str {
            "GUN_UNSPECIFIED" => ::std::option::Option::Some(Gun::GUN_UNSPECIFIED),
            "GUN_AUTOMATIC_RIFLE" => ::std::option::Option::Some(Gun::GUN_AUTOMATIC_RIFLE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Gun] = &[
        Gun::GUN_UNSPECIFIED,
        Gun::GUN_AUTOMATIC_RIFLE,
    ];
}

impl ::protobuf::EnumFull for Gun {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Gun").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Gun {
    fn default() -> Self {
        Gun::GUN_UNSPECIFIED
    }
}

impl Gun {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Gun>("Gun")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13server_packet.proto\x12\tspellfire\x1a\x0btypes.proto\x1a\nmage.pr\
    oto\"\xe0\x02\n\x08Collider\x124\n\x04type\x18\x01\x20\x01(\x0e2\x20.spe\
    llfire.Collider.ColliderTypeR\x04type\x12\x1a\n\x08rotation\x18\x02\x20\
    \x01(\x01R\x08rotation\x12#\n\x04size\x18\x03\x20\x01(\x0b2\x0f.spellfir\
    e.Vec2R\x04size\x12\x16\n\x06radius\x18\x04\x20\x01(\x01R\x06radius\x12+\
    \n\x08position\x18\x05\x20\x01(\x0b2\x0f.spellfire.Vec2R\x08position\x12\
    +\n\x08velocity\x18\x06\x20\x01(\x0b2\x0f.spellfire.Vec2R\x08velocity\
    \x12\x1b\n\tis_static\x18\x07\x20\x01(\x08R\x08isStatic\"N\n\x0cCollider\
    Type\x12\x1d\n\x19COLLIDER_TYPE_UNSPECIFIED\x10\0\x12\t\n\x05POINT\x10\
    \x01\x12\n\n\x06CIRCLE\x10\x02\x12\x08\n\x04RECT\x10\x03\"\xdd\x03\n\x0f\
    EntityAttribute\x12B\n\x04type\x18\x01\x20\x01(\x0e2..spellfire.EntityAt\
    tribute.EntityAttributeTypeR\x04type\x12\x12\n\x04name\x18\x02\x20\x01(\
    \tR\x04name\x12\x16\n\x06health\x18\x03\x20\x01(\x01R\x06health\x12\x20\
    \n\x03gun\x18\x04\x20\x01(\x0e2\x0e.spellfire.GunR\x03gun\x12\x16\n\x06d\
    amage\x18\x05\x20\x01(\x01R\x06damage\x123\n\x0cspells_fired\x18\x06\x20\
    \x03(\x0e2\x10.spellfire.SpellR\x0bspellsFired\x12<\n\x0fspell_fire_time\
    \x18\x07\x20\x01(\x0b2\x14.spellfire.TimestampR\rspellFireTime\"\xac\x01\
    \n\x13EntityAttributeType\x12%\n!ENTITY_ATTRIBUTE_TYPE_UNSPECIFIED\x10\0\
    \x12\x08\n\x04NAME\x10\x01\x12\n\n\x06HEALTH\x10\x02\x12\x07\n\x03GUN\
    \x10\x03\x12\n\n\x06DAMAGE\x10\x04\x12\x15\n\x11SPELL_1_LAST_FIRE\x10\
    \x05\x12\x15\n\x11SPELL_2_LAST_FIRE\x10\x06\x12\x15\n\x11SPELL_3_LAST_FI\
    RE\x10\x07\"\xa2\x03\n\x06Entity\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02\
    id\x120\n\x04type\x18\x02\x20\x01(\x0e2\x1c.spellfire.Entity.EntityTypeR\
    \x04type\x12/\n\x08collider\x18\x03\x20\x01(\x0b2\x13.spellfire.Collider\
    R\x08collider\x125\n\x06states\x18\x05\x20\x03(\x0e2\x1d.spellfire.Entit\
    y.EntityStateR\x06states\x12:\n\nattributes\x18\x06\x20\x03(\x0b2\x1a.sp\
    ellfire.EntityAttributeR\nattributes\"\x84\x01\n\nEntityType\x12\x1b\n\
    \x17ENTITY_TYPE_UNSPECIFIED\x10\0\x12\n\n\x06GUNNER\x10\x01\x12\x08\n\
    \x04MAGE\x10\x02\x12\n\n\x06BULLET\x10\x03\x12\x08\n\x04BUSH\x10\x04\x12\
    \x08\n\x04TREE\x10\x05\x12\x08\n\x04ROCK\x10\x06\x12\r\n\tDEAD_BUSH\x10\
    \x07\x12\n\n\x06CACTUS\x10\x08\"+\n\x0bEntityState\x12\x1c\n\x18ENTITY_S\
    TATE_UNSPECIFIED\x10\0\"\xc0\x01\n\x0bServerEvent\x12:\n\x04type\x18\x01\
    \x20\x01(\x0e2&.spellfire.ServerEvent.ServerEventTypeR\x04type\x12/\n\
    \x14enter_game_player_id\x18\x02\x20\x01(\rR\x11enterGamePlayerId\"D\n\
    \x0fServerEventType\x12!\n\x1dSERVER_EVENT_TYPE_UNSPECIFIED\x10\0\x12\
    \x0e\n\nENTER_GAME\x10\x01\"\xa1\x01\n\x0cServerPacket\x122\n\ttimestamp\
    \x18\x01\x20\x01(\x0b2\x14.spellfire.TimestampR\ttimestamp\x12-\n\x08ent\
    ities\x18\x02\x20\x03(\x0b2\x11.spellfire.EntityR\x08entities\x12.\n\x06\
    events\x18\x03\x20\x03(\x0b2\x16.spellfire.ServerEventR\x06events*3\n\
    \x03Gun\x12\x13\n\x0fGUN_UNSPECIFIED\x10\0\x12\x17\n\x13GUN_AUTOMATIC_RI\
    FLE\x10\x01B?Z=github.com/Icemaster-Eric/Spellfire/backend/internal/prot\
    o;pbb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::types::file_descriptor().clone());
            deps.push(super::mage::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Collider::generated_message_descriptor_data());
            messages.push(EntityAttribute::generated_message_descriptor_data());
            messages.push(Entity::generated_message_descriptor_data());
            messages.push(ServerEvent::generated_message_descriptor_data());
            messages.push(ServerPacket::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(6);
            enums.push(Gun::generated_enum_descriptor_data());
            enums.push(collider::ColliderType::generated_enum_descriptor_data());
            enums.push(entity_attribute::EntityAttributeType::generated_enum_descriptor_data());
            enums.push(entity::EntityType::generated_enum_descriptor_data());
            enums.push(entity::EntityState::generated_enum_descriptor_data());
            enums.push(server_event::ServerEventType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
